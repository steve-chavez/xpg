name: CI

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  build-test-xpg-core:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Nix
        uses: cachix/install-nix-action@v30

      - name: Use Cachix Cache
        uses: cachix/cachix-action@v16
        with:
          name: nxpg
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build xpg-core
        run: nix-build -A xpg-core

      - name: Build postgres core
        run: |
          cd examples/postgres
          ../../result/bin/xpg-core build

      - name: Test postgres core
        run: |
          cd examples/postgres
          ../../result/bin/xpg-core psql -v ON_ERROR_STOP=1 -c "SELECT true;"
          ../../result/bin/xpg-core -k box test
          ../../result/bin/xpg-core test

      - name: Upload to cachix
        run: |
          set -euo pipefail
          result=$(nix-build -A xpg-core)
          if [ "${GITHUB_REF}" = 'refs/heads/master' ]; then
            echo "$result" | cachix push nxpg
          fi

  build-test-xpg:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg-version: ['12', '13', '14', '15', '16', '17', '18']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Nix
        uses: cachix/install-nix-action@v30

      - name: Use Cachix Cache
        uses: cachix/cachix-action@v16
        with:
          name: nxpg
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build xpg
        run: nix-build -A xpg

      - name: Build postgres extension
        run: |
          cd examples/hello
          ../../result/bin/xpg -v ${{ matrix.pg-version }} build

      - name: Test postgres extension
        run: |
          cd examples/hello
          ../../result/bin/xpg -v ${{ matrix.pg-version }} psql -v ON_ERROR_STOP=1 -c "SELECT true;"
          ../../result/bin/xpg -v ${{ matrix.pg-version }} psql -v ON_ERROR_STOP=1 -c "SELECT true;"
          ../../result/bin/xpg -v ${{ matrix.pg-version }} test
          ../../result/bin/xpg -v ${{ matrix.pg-version }} pgbench -n -c 1 -T 1 -f bench/query.sql

          # test for options argument
          ../../result/bin/xpg -v ${{ matrix.pg-version }} --options "-c work_mem=8MB" psql -c "DO \$\$ BEGIN ASSERT current_setting('work_mem') = '8MB'; END \$\$;"

          # test for cassert enabled build
          ../../result/bin/xpg -v ${{ matrix.pg-version }} --cassert psql -c "DO \$\$ BEGIN ASSERT current_setting('debug_assertions') = 'on'; END \$\$;"

      - name: Upload to cachix
        run: |
          set -euo pipefail
          result=$(nix-build -A xpg)
          if [ "${GITHUB_REF}" = 'refs/heads/master' ]; then
            echo "$result" | cachix push nxpg
          fi

  test-nix-expressions:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Nix
        uses: cachix/install-nix-action@v30

      - name: Use Cachix Cache
        uses: cachix/cachix-action@v16
        with:
          name: nxpg
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Test xpgWithExtensions
        run: |
          nix-build tests
          cd examples/hello
          ../../result/bin/xpg -v 15 psql -v ON_ERROR_STOP=1 -c "CREATE EXTENSION plpgsql_check;"

  build-on-macos:
    runs-on: macos-15

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v30

      - name: Use Cachix Cache
        uses: cachix/cachix-action@v16
        with:
          name: nxpg
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build
        run: |
          set -euo pipefail
          result=$(nix-build)
          if [ "${GITHUB_REF}" = 'refs/heads/master' ]; then
            echo "$result" | cachix push nxpg
          fi
